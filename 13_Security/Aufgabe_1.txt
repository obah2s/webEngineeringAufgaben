Es liegt daran, dass es keine richtige Privatisierung in JavaScript gibt, dass es einfach ist die set Methode zu überschreiben und anstatt Werte zu geben, ist es möglich eine Funktion zu übergeben und somit leicht das interne Array zu kopieren.

Eine Funktion zu addieren, die checkt ob die gegebenen Argumente bei set und append values sind oder Funktionen. 

function arrayWrapper () {
  var array ;
  return{
    get: function(position) {
      return array[position];
    },
    set: function (position, value) {
      if (myFunction(position) || myFunction(value)) {
        console.log('Evenetuel exploitation!');
        return;
      } else {
        array[position]=value;
      }
      function myFunction ( checkFunction){
        return checkFunction && {}.toString.call(checkFunction) ==='[object Function]';
      }

    },
    append: function (value) {
      if (myFunction(value)) {
        console.log('Eventuel exploitation!');
        return;
      } else {
        array.push(value);
      }
      function myFunction(checkFunction){
        return checkFunction && {}.toString.call(checkFunction) ==='[object Function]';
      }

    },

  }
}